<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">
           <!-- Spring 集成Hibernate   为什么说使用HibernateTemplate对代码有侵入 推荐使用Hibernate Contextual Session-->

           <!-- 1 配置数据源 -->
        <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	    <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
	    <property name="url" value="jdbc:oracle:thin:@localhost:1521:ORCL"/>
	    <property name="username" value="scott"/>
	    <property name="password" value="monster"/>
	     <!-- 连接池启动时的初始值 -->
		 <property name="initialSize" value="3"/>
		 <!-- 连接池的最大值 -->
		 <property name="maxActive" value="30"/>
		 <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		 <property name="maxIdle" value="3"/>
		 <!--  最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		 <property name="minIdle" value="1"/>
	 </bean>

	 <!-- 2 配置Hibernate的 SessionFactory 交给Spring管理  这种是基于*.hbm映射文件的 -->
	 <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
	     <property name="dataSource" ref="dataSource"/>
		 <property name="mappingResources">
		     <!-- list 标签里面配置Hibernate的实体映射文件 -->
		    <list>
		    </list>
		 </property>
	     <property name="hibernateProperties">
		    <value>
		        hibernate.dialect=org.hibernate.dialect.MySQLDialect
		        hibernate.hbm2ddl.auto=update
		        hibernate.show_sql=true
		        hibernate.format_sql=false
		        hibernate.cache.use_second_level_cache=true
       	        hibernate.cache.use_query_cache=false
        	    hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
		      </value>
	     </property>
	</bean>


	<!-- 2 配置Hibernate的 SessionFactory 交给Spring管理  这种ORM是基于Annotation的
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
	     <property name="dataSource" ref="dataSource"/>
	     方案一 让容器自动扫描具有Annotation的类
	     <property name="packagesToScan">
				<list>
					<value>com.mxJ.bean</value>
				</list>
	     </property>
		 方案二 手动添加具有annotation的类
		 <property name="annotatedClasses">
		 	<list>
		 				<value>com.asiainfo.boss4.domain.CrmUserMonitor</value>
		 	</list>
		 </property>
	     <property name="hibernateProperties">
		    <value>
		        hibernate.dialect=org.hibernate.dialect.MySQLDialect
		        hibernate.hbm2ddl.auto=update
		        hibernate.show_sql=true
		        hibernate.format_sql=false
		        hibernate.cache.use_second_level_cache=true
	       	        hibernate.cache.use_query_cache=false
	        	    hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
		      </value>
	     </property>
	</bean>
	 -->

	   <!-- 3 配置事务交给Spring管理 -->
	   <bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
	  	<property name="sessionFactory" ref="sessionFactory"/>
	  </bean>

	  <!-- 4 使用AOP式的事务管理
	  <tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" propagation="SUPPORTS"/>
			<tx:method name="update*"/>
			<tx:method name="delete*"/>
			<tx:method name="remove*"/>
			<tx:method name="deal*" rollback-for="Throwable"/>
			<tx:method name="dw*" propagation="REQUIRES_NEW" rollback-for="Throwable"/>
			<tx:method name="*" read-only="true" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

     配置基于AOP的事务管理
     <aop:config>
		<aop:advisor pointcut="execution(* com.mxJ.service.*.*(..))" advice-ref="txAdvice"/>
	</aop:config>
	-->
</beans>